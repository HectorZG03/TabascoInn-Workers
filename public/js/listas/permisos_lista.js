// ========================================
// üéØ LISTA DE PERMISOS - CON RUTAS DIN√ÅMICAS
// ========================================

document.addEventListener('DOMContentLoaded', function() {
    // ‚úÖ VERIFICAR QUE AppRoutes EST√â DISPONIBLE
    if (typeof AppRoutes === 'undefined') {
        console.error('‚ùå AppRoutes no est√° disponible para lista de permisos');
        return;
    }

    console.log('‚úÖ Script de lista de permisos con rutas din√°micas inicializado');
});

// ========================================
// üîÑ FUNCI√ìN PARA FINALIZAR PERMISO
// ========================================
function finalizarPermiso(permisoId, nombreTrabajador) {
    if (!window.AppRoutes) {
        console.error('‚ùå AppRoutes no disponible para finalizar permiso');
        alert('Error: Sistema de rutas no disponible. Recargue la p√°gina e intente nuevamente.');
        return;
    }

    if (confirm(`¬øEst√° seguro de finalizar el permiso de ${nombreTrabajador}? El trabajador ser√° reactivado.`)) {
        // ‚úÖ USAR RUTAS DIN√ÅMICAS EN LUGAR DE HARDCODED
        const actionUrl = AppRoutes.permisos(`${permisoId}/finalizar`);
        
        console.log('üîÑ Finalizando permiso, URL:', actionUrl);
        
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = actionUrl;
        
        const csrfToken = document.createElement('input');
        csrfToken.type = 'hidden';
        csrfToken.name = '_token';
        csrfToken.value = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
        
        const methodField = document.createElement('input');
        methodField.type = 'hidden';
        methodField.name = '_method';
        methodField.value = 'PATCH';
        
        form.appendChild(csrfToken);
        form.appendChild(methodField);
        document.body.appendChild(form);
        
        console.log('‚úÖ Enviando formulario de finalizaci√≥n de permiso');
        form.submit();
    }
}

// ========================================
// üóëÔ∏è FUNCI√ìN PARA CANCELAR/ELIMINAR PERMISO
// ========================================
function cancelarPermiso(permisoId, nombreTrabajador) {
    if (!window.AppRoutes) {
        console.error('‚ùå AppRoutes no disponible para cancelar permiso');
        alert('Error: Sistema de rutas no disponible. Recargue la p√°gina e intente nuevamente.');
        return;
    }

    if (confirm(`‚ö†Ô∏è ¬øEst√° seguro de ELIMINAR DEFINITIVAMENTE el permiso de ${nombreTrabajador}?\n\nEsta acci√≥n:\n‚Ä¢ Eliminar√° el permiso de la base de datos\n‚Ä¢ Reactivar√° al trabajador\n‚Ä¢ NO SE PUEDE DESHACER\n\n¬øContinuar?`)) {
        // ‚úÖ USAR RUTAS DIN√ÅMICAS EN LUGAR DE HARDCODED
        const actionUrl = AppRoutes.permisos(`${permisoId}/cancelar`);
        
        console.log('üîÑ Cancelando permiso, URL:', actionUrl);
        
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = actionUrl;
        
        const csrfToken = document.createElement('input');
        csrfToken.type = 'hidden';
        csrfToken.name = '_token';
        csrfToken.value = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
        
        const methodField = document.createElement('input');
        methodField.type = 'hidden';
        methodField.name = '_method';
        methodField.value = 'DELETE';
        
        form.appendChild(csrfToken);
        form.appendChild(methodField);
        document.body.appendChild(form);
        
        console.log('‚úÖ Enviando formulario de cancelaci√≥n de permiso');
        form.submit();
    }
}

// ========================================
// üîß FUNCIONES AUXILIARES PARA PERMISOS
// ========================================

/**
 * Funci√≥n para subir archivo de permiso (si es necesaria)
 * @param {number} permisoId - ID del permiso
 */
function subirArchivoPermiso(permisoId) {
    if (!window.AppRoutes) {
        console.error('‚ùå AppRoutes no disponible para subir archivo');
        return;
    }

    const actionUrl = AppRoutes.url(`permisos/${permisoId}/subir-archivo`);
    console.log('üìé URL para subir archivo:', actionUrl);
    
    // Esta funci√≥n se puede usar si necesitas manejar la subida de archivos
    // por JavaScript en lugar de formularios est√°ticos
}

/**
 * Funci√≥n para descargar archivo de permiso
 * @param {number} permisoId - ID del permiso
 */
function descargarArchivoPermiso(permisoId) {
    if (!window.AppRoutes) {
        console.error('‚ùå AppRoutes no disponible para descargar archivo');
        return;
    }

    const downloadUrl = AppRoutes.url(`permisos/${permisoId}/descargar`);
    console.log('üì• Descargando archivo desde:', downloadUrl);
    
    // Abrir en nueva ventana para descargar
    window.open(downloadUrl, '_blank');
}

// ========================================
// üõ†Ô∏è UTILIDADES DE DEBUG
// ========================================

/**
 * Funci√≥n de debug para verificar rutas de permisos
 */
function debugRutasPermisos() {
    if (!window.AppRoutes) {
        console.error('‚ùå AppRoutes no disponible para debug');
        return;
    }

    console.group('üîç Debug Rutas de Permisos');
    console.log('Base URL:', AppRoutes.getBaseUrl());
    console.log('Rutas de permisos:');
    console.log('- Lista:', AppRoutes.permisos());
    console.log('- Finalizar permiso 1:', AppRoutes.permisos('1/finalizar'));
    console.log('- Cancelar permiso 1:', AppRoutes.permisos('1/cancelar'));
    console.log('- Descargar permiso 1:', AppRoutes.url('permisos/1/descargar'));
    console.log('- Subir archivo permiso 1:', AppRoutes.url('permisos/1/subir-archivo'));
    console.groupEnd();
}

// ========================================
// üåê EXPONER FUNCIONES GLOBALMENTE
// ========================================

// Asegurar que las funciones est√©n disponibles globalmente
window.finalizarPermiso = finalizarPermiso;
window.cancelarPermiso = cancelarPermiso;
window.subirArchivoPermiso = subirArchivoPermiso;
window.descargarArchivoPermiso = descargarArchivoPermiso;
window.debugRutasPermisos = debugRutasPermisos;